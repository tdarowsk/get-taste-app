name: Production Deployment

on:
  workflow_dispatch:

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint

  unit-test:
    name: Unit Tests
    needs: lint
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests with coverage
        run: npm run test:unit -- --coverage

      - name: Upload unit test coverage
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-coverage
          path: coverage/
          retention-days: 14

  build-and-deploy:
    name: Build and Deploy to Cloudflare Pages
    needs: unit-test
    runs-on: ubuntu-latest
    environment: production
    permissions:
      contents: read
      deployments: write
    env:
      ENV_NAME: production
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
      PUBLIC_SUPABASE_URL: ${{ secrets.PUBLIC_SUPABASE_URL }}
      PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.PUBLIC_SUPABASE_ANON_KEY }}
      OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
      TMDB_API_KEY: ${{ secrets.TMDB_API_KEY }}
      NODE_ENV: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build
        
      - name: Publish to Cloudflare Pages
        id: deploy
        uses: cloudflare/wrangler-action@v3.14.1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: pages deploy dist --project-name=get-taste --branch=main
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}

      - name: Print deployment URL
        run: echo "Deployed to ${{ steps.deploy.outputs.deployment-url }}"

  deployment-notification:
    name: Deployment Notification
    needs: build-and-deploy
    if: ${{ always() }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Notify on successful deployment
        if: ${{ needs.build-and-deploy.result == 'success' }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { repo: { owner, repo } } = context;
            
            github.rest.repos.createCommitComment({
              owner,
              repo,
              commit_sha: context.sha,
              body: `✅ Successfully deployed to Cloudflare Pages.\nEnvironment: Production\nDeployment triggered by: ${context.actor}`
            });
      
      - name: Notify on failed deployment
        if: ${{ needs.build-and-deploy.result != 'success' }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { repo: { owner, repo } } = context;
            
            github.rest.repos.createCommitComment({
              owner,
              repo,
              commit_sha: context.sha,
              body: `❌ Deployment to Cloudflare Pages failed.\nEnvironment: Production\nPlease check the build logs for more details.`
            }); 