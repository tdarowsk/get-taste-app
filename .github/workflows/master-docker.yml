name: Docker Build and Deploy

on:
  workflow_dispatch:
  push:
    branches:
      - master
      - main

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint

  unit-test:
    name: Unit Tests
    needs: lint
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests with coverage
        run: npm run test:unit -- --coverage

      - name: Upload unit test coverage
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-coverage
          path: coverage/
          retention-days: 14

  docker-build:
    name: Build and Push Docker Image
    needs: unit-test
    runs-on: ubuntu-latest
    environment: production
    permissions:
      contents: read
      packages: write
      id-token: write
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: tdarowsk/get-taste
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,format=long
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            PUBLIC_ENV_NAME=${{ secrets.PUBLIC_ENV_NAME }}

  deploy:
    name: Deploy to DigitalOcean
    needs: docker-build
    runs-on: ubuntu-latest
    environment: production
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: tdarowsk/get-taste
    steps:
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Deploy to DigitalOcean App Platform
        run: |
          doctl apps create-deployment ${{ secrets.DIGITALOCEAN_APP_ID }} \
            --image "${REGISTRY}/${IMAGE_NAME}@${GITHUB_SHA}" \
            --wait

  deployment-notification:
    name: Deployment Notification
    needs: deploy
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Notify on successful deployment
        if: ${{ needs.deploy.result == 'success' }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { repo: { owner, repo } } = context;
            
            github.rest.repos.createCommitComment({
              owner,
              repo,
              commit_sha: context.sha,
              body: `✅ Successfully deployed to DigitalOcean App Platform.\nEnvironment: Production\nDeployment triggered by: ${context.actor}`
            });
      
      - name: Notify on failed deployment
        if: ${{ needs.deploy.result != 'success' }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { repo: { owner, repo } } = context;
            
            github.rest.repos.createCommitComment({
              owner,
              repo,
              commit_sha: context.sha,
              body: `❌ Deployment to DigitalOcean App Platform failed.\nEnvironment: Production\nPlease check the build logs for more details.`
            }); 